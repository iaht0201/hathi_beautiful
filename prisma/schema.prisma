datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum ProductStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

model Product {
    id             String  @id @default(cuid())
    name           String
    slug           String  @unique
    sku            String?
    price          Int
    compareAtPrice Int?
    stock          Int     @default(0)

    imageUrl String?
    images   ProductImage[]

    shortDescription String?
    description      String?
    ingredients      String?
    usage            String?
    volume           String?
    volumeUnit       String?

    origin String?
    // barcode          String?
    // tags             String[] // Postgres arraydockr

    isFeatured  Boolean       @default(false)
    status      ProductStatus @default(PUBLISHED)
    publishedAt DateTime?     @db.Timestamp(6)

    // SEO
    metaTitle       String?
    metaDescription String?

    brandId    String?
    categoryId String?
    brand      Brand?    @relation(fields: [brandId], references: [id])
    category   Category? @relation(fields: [categoryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([status, publishedAt])
    @@index([brandId])
    @@index([categoryId])
}

model ProductImage {
    id        String  @id @default(cuid())
    url       String
    alt       String?
    position  Int     @default(0)
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([productId, position])
}

model Brand {
    id        String    @id @default(cuid())
    name      String
    slug      String    @unique
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    @@index([name])
}

model Category {
    id        String          @id @default(cuid())
    name      String
    slug      String          @unique
    products  Product[]
    createdAt DateTime        @default(now())
    updatedAt DateTime?       @updatedAt
    images    ImageCategory[]

    @@index([name])
}

model ImageCategory {
    id        String  @id @default(cuid())
    imageUrl  String
    alt       String?
    isPrimary Boolean @default(false)
    sortOrder Int     @default(0)

    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    createdAt  DateTime @default(now())

    @@index([categoryId])
    @@index([isPrimary])
}

model HeroSlide {
    id           String     @id @default(cuid())
    href         String
    alt          String
    image        ImageSlide @relation(fields: [imageSlideId], references: [id]) // đổi tên
    imageSlideId String

    position Int? // hoặc @default(0)
    active   Boolean   @default(true)
    startAt  DateTime?
    endAt    DateTime?

    caption   CaptionHeroSlide? @relation(fields: [captionId], references: [id])
    captionId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([active, startAt, endAt])
    @@index([position])
}

model ImageSlide {
    id         String      @id @default(cuid())
    mobileUrl  String
    desktopUrl String
    HeroSlide  HeroSlide[]
}

model CaptionHeroSlide {
    id        String      @id @default(cuid())
    title     String?
    subtitle  String?
    ctaHref   String?
    ctaLabel  String?
    HeroSlide HeroSlide[]
}
